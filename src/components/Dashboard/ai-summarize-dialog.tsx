"use client"

import { useState } from "react"
import { Sparkles, Download, Copy } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Slider } from "@/components/ui/slider"

interface AiSummarizeDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  document: any
}

export function AiSummarizeDialog({ open, onOpenChange, document }: AiSummarizeDialogProps) {
  const [summarizing, setSummarizing] = useState(false)
  const [summary, setSummary] = useState("")
  const [summaryLength, setSummaryLength] = useState([50])
  const [summaryType, setSummaryType] = useState("concise")
  const [activeTab, setActiveTab] = useState("original")

  const handleSummarize = async () => {
    if (!document) return

    try {
      setSummarizing(true)

      // Mock API call - in real implementation, call your API
      const response = await fetch("/api/summarize", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          documentId: document.documentId,
          length: summaryLength[0],
          type: summaryType,
        }),
      })

      if (!response.ok) {
        throw new Error("Summarization failed")
      }

      // For demo purposes, set mock summary
      setSummary(
        "This is an AI-generated summary of the document. In a real implementation, this would be the actual summary generated by your AI service. The summary would highlight the key points and main ideas from the document in a concise format based on your selected preferences.",
      )
      setActiveTab("summary")
    } catch (error) {
      console.error("Error summarizing document:", error)
      // For demo purposes, set mock summary
      setSummary(
        "This is an AI-generated summary of the document. In a real implementation, this would be the actual summary generated by your AI service. The summary would highlight the key points and main ideas from the document in a concise format based on your selected preferences.",
      )
      setActiveTab("summary")
    } finally {
      setSummarizing(false)
    }
  }

  const handleDownload = () => {
    if (!summary) return

    // Create a blob from the summary
    const blob = new Blob([summary], { type: "text/plain" })
    const url = URL.createObjectURL(blob)

    // Create a download link and trigger it
    const a = document.createElement("a")
    a.href = url
    a.download = `${document?.fileName || "document"}_summary.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleCopy = () => {
    if (!summary) return

    navigator.clipboard
      .writeText(summary)
      .then(() => {
        // You could show a toast notification here
        console.log("Summary copied to clipboard")
      })
      .catch((err) => {
        console.error("Failed to copy summary:", err)
      })
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[700px]">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Sparkles className="h-5 w-5" />
            AI Summarize
          </DialogTitle>
          <DialogDescription>Generate an AI summary of "{document?.fileName}"</DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="summaryType" className="text-right">
              Summary Type
            </Label>
            <Select value={summaryType} onValueChange={setSummaryType}>
              <SelectTrigger id="summaryType" className="col-span-3">
                <SelectValue placeholder="Select summary type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="concise">Concise</SelectItem>
                <SelectItem value="detailed">Detailed</SelectItem>
                <SelectItem value="bullet">Bullet Points</SelectItem>
                <SelectItem value="academic">Academic</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="summaryLength" className="text-right">
              Length: {summaryLength[0]}%
            </Label>
            <div className="col-span-3">
              <Slider
                id="summaryLength"
                min={10}
                max={90}
                step={10}
                value={summaryLength}
                onValueChange={setSummaryLength}
              />
            </div>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="original">Original</TabsTrigger>
              <TabsTrigger value="summary">Summary</TabsTrigger>
            </TabsList>
            <TabsContent value="original" className="mt-2">
              <div className="rounded-md border p-4 h-[300px] overflow-y-auto">
                <p className="text-sm">
                  {document?.content ||
                    "Original document content would be displayed here. This is a placeholder text since we don't have the actual content."}
                </p>
              </div>
            </TabsContent>
            <TabsContent value="summary" className="mt-2">
              <div className="rounded-md border p-4 h-[300px] overflow-y-auto">
                {summary ? (
                  <p className="text-sm">{summary}</p>
                ) : (
                  <div className="flex h-full items-center justify-center">
                    <p className="text-sm text-muted-foreground">Summary will appear here after generation</p>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </div>

        <DialogFooter className="flex flex-col sm:flex-row gap-2">
          <Button variant="outline" onClick={() => onOpenChange(false)} className="sm:order-1">
            Cancel
          </Button>
          {summary ? (
            <>
              <Button variant="outline" onClick={handleCopy} className="sm:order-2">
                <Copy className="mr-2 h-4 w-4" />
                Copy Summary
              </Button>
              <Button onClick={handleDownload} className="sm:order-3">
                <Download className="mr-2 h-4 w-4" />
                Download Summary
              </Button>
            </>
          ) : (
            <Button onClick={handleSummarize} disabled={summarizing} className="sm:order-2">
              {summarizing ? "Summarizing..." : "Generate Summary"}
            </Button>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

